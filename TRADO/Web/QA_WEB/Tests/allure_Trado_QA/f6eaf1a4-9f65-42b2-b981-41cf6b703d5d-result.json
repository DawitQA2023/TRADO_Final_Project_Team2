{"name": "test_upload_product_when_PhoneNumber_is_null04", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000018CE5E643D0>, expected = 6, actual = 8\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n>           assert expected == actual\nE           AssertionError\n\n..\\Utils\\utils_QA.py:15: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TRADO.QA_WEB.Tests.testQA_upload_new_product.Test_Upload_New_Product_not_having_store object at 0x0000018CE542F220>\n\n    @pytest.mark.regression\n    @allure.description('Upload a product incorrectly when the user does not have a store and phoneNumber is null')\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_upload_product_when_PhoneNumber_is_null04(self):\n        driver = self.driver\n        upload_product = Upload_New_Product_Page(driver)\n        upload_product.click_add_new_product_section()\n>       upload_product.enter_all_inputs_filed(['1', 'Brands', '', 'a@trado.com', 'Brands.com', 'Tel-Aviv',\n                                               'Herzel', '1'])\n\ntestQA_upload_new_product.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\upload_new_productQA_page.py:58: in enter_all_inputs_filed\n    fields = self.inputs_fields()\n..\\Pages\\upload_new_productQA_page.py:40: in inputs_fields\n    utils.assertion(len(fields), 8)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000018CE5E643D0>, expected = 6, actual = 8\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n            assert expected == actual\n            self.driver.implicitly_wait(1000)\n    \n        except AssertionError:\n            allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n>           raise AssertionError\nE           AssertionError\n\n..\\Utils\\utils_QA.py:20: AssertionError"}, "description": "Upload a product incorrectly when the user does not have a store and phoneNumber is null", "steps": [{"name": "click_add_new_product_section", "status": "passed", "start": 1677105578630, "stop": 1677105580815}, {"name": "enter_all_inputs_filed", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 58, in enter_all_inputs_filed\n    fields = self.inputs_fields()\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 40, in inputs_fields\n    utils.assertion(len(fields), 8)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "steps": [{"name": "inputs_fields", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 40, in inputs_fields\n    utils.assertion(len(fields), 8)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "steps": [{"name": "assertion", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "attachments": [{"name": "screenShot", "source": "999d9bee-e91a-4ecd-873a-acc064e473d5-attachment.png", "type": "image/png"}], "parameters": [{"name": "expected", "value": "6"}, {"name": "actual", "value": "8"}], "start": 1677105581828, "stop": 1677105581997}], "start": 1677105580815, "stop": 1677105581998}], "parameters": [{"name": "data", "value": "['1', 'Brands', '', 'a@trado.com', 'Brands.com', 'Tel-Aviv', 'Herzel', '1']"}], "start": 1677105580815, "stop": 1677105581998}], "attachments": [{"name": "stdout", "source": "83acfe2e-1358-4148-90fc-0969f8b02ccc-attachment.txt", "type": "text/plain"}], "start": 1677105578629, "stop": 1677105581999, "uuid": "1b82e30b-832f-457f-a699-925ecba0c90a", "historyId": "43a7eb5113e180cf02a1f7c0159bf79d", "testCaseId": "a8861d3149231791129b80904b336c28", "fullName": "testQA_upload_new_product.Test_Upload_New_Product_not_having_store#test_upload_product_when_PhoneNumber_is_null04", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('Valid_Login_With_login_Code')"}, {"name": "suite", "value": "testQA_upload_new_product"}, {"name": "subSuite", "value": "Test_Upload_New_Product_not_having_store"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "27108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testQA_upload_new_product"}]}