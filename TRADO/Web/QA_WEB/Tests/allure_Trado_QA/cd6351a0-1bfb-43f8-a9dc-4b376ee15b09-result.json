{"name": "test_Validate_Search_existing_product_and_add_to_product_page__S14", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=110.0.5481.104)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x008937D3]\n\t(No symbol) [0x00828B81]\n\t(No symbol) [0x0072B230]\n\t(No symbol) [0x0075E337]\n\t(No symbol) [0x00753253]\n\t(No symbol) [0x0077B41C]\n\t(No symbol) [0x00752B96]\n\t(No symbol) [0x0077B774]\n\t(No symbol) [0x00791215]\n\t(No symbol) [0x0077B216]\n\t(No symbol) [0x00750D97]\n\t(No symbol) [0x0075253D]\n\tGetHandleVerifier [0x00B0ABF2+2510930]\n\tGetHandleVerifier [0x00B38EC1+2700065]\n\tGetHandleVerifier [0x00B3C86C+2714828]\n\tGetHandleVerifier [0x00943480+645344]\n\t(No symbol) [0x00830FD2]\n\t(No symbol) [0x00836C68]\n\t(No symbol) [0x00836D4B]\n\t(No symbol) [0x00840D6B]\n\tBaseThreadInitThunk [0x75C700F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C77BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C77B8E+238]", "trace": "self = <TRADO.QA_WEB.Tests.testQA_search.Test_Search_Chrome3 object at 0x000002384024EE00>\n\n    @pytest.mark.sanity\n    @allure.description('Successfully search for an existing product')\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Validate_Search_existing_product_and_add_to_product_page__S14(self):\n        driver = self.driver\n        Search = Search_Page(driver)\n        Search.Click_SearchBox()\n        Search.Enter_Search_product(\"goats\")\n        Search.Click_Product_Empty_space()\n>       Search.Click_Product_Search_DropDown_list()\n\ntestQA_search.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\searchQA_page.py:54: in Click_Product_Search_DropDown_list\n    self.driver.find_element(By.XPATH, Locators_Search.SEARCH_DROPDOWN_LIST_XPATH).click()\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023840FE0460>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C77B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=110.0.5481.104)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x008937D3]\nE       \t(No symbol) [0x00828B81]\nE       \t(No symbol) [0x0072B230]\nE       \t(No symbol) [0x0075E337]\nE       \t(No symbol) [0x00753253]\nE       \t(No symbol) [0x0077B41C]\nE       \t(No symbol) [0x00752B96]\nE       \t(No symbol) [0x0077B774]\nE       \t(No symbol) [0x00791215]\nE       \t(No symbol) [0x0077B216]\nE       \t(No symbol) [0x00750D97]\nE       \t(No symbol) [0x0075253D]\nE       \tGetHandleVerifier [0x00B0ABF2+2510930]\nE       \tGetHandleVerifier [0x00B38EC1+2700065]\nE       \tGetHandleVerifier [0x00B3C86C+2714828]\nE       \tGetHandleVerifier [0x00943480+645344]\nE       \t(No symbol) [0x00830FD2]\nE       \t(No symbol) [0x00836C68]\nE       \t(No symbol) [0x00836D4B]\nE       \t(No symbol) [0x00840D6B]\nE       \tBaseThreadInitThunk [0x75C700F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C77B8E+238]\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementNotInteractableException"}, "description": "Successfully search for an existing product", "steps": [{"name": "Click_SearchBox", "status": "passed", "start": 1677098146888, "stop": 1677098150947}, {"name": "Enter_Search_product", "status": "passed", "steps": [{"name": "assertion", "status": "passed", "parameters": [{"name": "expected", "value": "'goats'"}, {"name": "actual", "value": "'goats'"}], "start": 1677098153039, "stop": 1677098153042}], "parameters": [{"name": "ProductName", "value": "'goats'"}], "start": 1677098150947, "stop": 1677098153043}, {"name": "Click_Product_Empty_space", "status": "passed", "start": 1677098153043, "stop": 1677098155130}, {"name": "Click_Product_Search_DropDown_list", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=110.0.5481.104)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x008937D3]\n\t(No symbol) [0x00828B81]\n\t(No symbol) [0x0072B230]\n\t(No symbol) [0x0075E337]\n\t(No symbol) [0x00753253]\n\t(No symbol) [0x0077B41C]\n\t(No symbol) [0x00752B96]\n\t(No symbol) [0x0077B774]\n\t(No symbol) [0x00791215]\n\t(No symbol) [0x0077B216]\n\t(No symbol) [0x00750D97]\n\t(No symbol) [0x0075253D]\n\tGetHandleVerifier [0x00B0ABF2+2510930]\n\tGetHandleVerifier [0x00B38EC1+2700065]\n\tGetHandleVerifier [0x00B3C86C+2714828]\n\tGetHandleVerifier [0x00943480+645344]\n\t(No symbol) [0x00830FD2]\n\t(No symbol) [0x00836C68]\n\t(No symbol) [0x00836D4B]\n\t(No symbol) [0x00840D6B]\n\tBaseThreadInitThunk [0x75C700F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C77BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C77B8E+238]\n\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\searchQA_page.py\", line 54, in Click_Product_Search_DropDown_list\n    self.driver.find_element(By.XPATH, Locators_Search.SEARCH_DROPDOWN_LIST_XPATH).click()\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 403, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1677098155130, "stop": 1677098205177}], "attachments": [{"name": "stdout", "source": "52328db4-7981-43f2-aa66-a643d5c2d71c-attachment.txt", "type": "text/plain"}], "start": 1677098146888, "stop": 1677098205178, "uuid": "27acc991-c693-4ec4-a00d-f238f0979996", "historyId": "7caea8f55556ab1e84b563cf5891197d", "testCaseId": "1d06209b856c6dc47cf172a56bbb80e8", "fullName": "testQA_search.Test_Search_Chrome3#test_Validate_Search_existing_product_and_add_to_product_page__S14", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('WithOut_login_selectField_none')"}, {"name": "suite", "value": "testQA_search"}, {"name": "subSuite", "value": "Test_Search_Chrome3"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "4380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testQA_search"}]}