{"name": "test_Snack_trado_QA_PAGE_NL_47", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000015300AFEEF0>, expected = 'goats', actual = 'Goats'\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n>           assert expected == actual\nE           AssertionError\n\n..\\Utils\\utils_QA.py:15: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TRADO.QA_WEB.Tests.testQA_Product.Test_Snack_Product08 object at 0x000001537FD0A530>\n\n    @pytest.mark.sanity\n    @allure.description('CLICK \"SNACK\" CLICK')\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Snack_trado_QA_PAGE_NL_47(self):\n        driver = self.driver\n        SNACK = Product_page(driver)\n        SNACK.Click_snack_link()\n        SNACK.Click_goat_product()\n        text = SNACK.Assert_text(path.DISPLAY_NAME_TITLE)\n>       Utils(driver).assertion(\"goats\", text)\n\ntestQA_Product.py:621: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000015300AFEEF0>, expected = 'goats', actual = 'Goats'\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n            assert expected == actual\n            self.driver.implicitly_wait(1000)\n    \n        except AssertionError:\n            allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n>           raise AssertionError\nE           AssertionError\n\n..\\Utils\\utils_QA.py:20: AssertionError"}, "description": "CLICK \"SNACK\" CLICK", "steps": [{"name": "Click_snack_link", "status": "passed", "start": 1677106597578, "stop": 1677106598653}, {"name": "Click_goat_product", "status": "passed", "start": 1677106598653, "stop": 1677106600741}, {"name": "Assert_text", "status": "passed", "parameters": [{"name": "path", "value": "'/html/body/div[1]/div/div[2]/div[2]/div/div/div[2]/div/div[1]/div[1]/div/div[1]/div[2]/div[1]/h1'"}], "start": 1677106600741, "stop": 1677106600855}, {"name": "assertion", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "attachments": [{"name": "screenShot", "source": "a1386a22-dc20-4813-a23c-1bcb280ccd96-attachment.png", "type": "image/png"}], "parameters": [{"name": "expected", "value": "'goats'"}, {"name": "actual", "value": "'Goats'"}], "start": 1677106600855, "stop": 1677106601004}], "attachments": [{"name": "stdout", "source": "a12a49f4-b14a-427f-9f7c-7014d7000c8f-attachment.txt", "type": "text/plain"}], "start": 1677106597578, "stop": 1677106601004, "uuid": "68ab3888-c322-4899-ba6d-4436f742f796", "historyId": "487909b226ddd26e81e69dd477b48acd", "testCaseId": "d9b6c4f07e898db243fdd6b1f2300230", "fullName": "testQA_Product.Test_Snack_Product08#test_Snack_trado_QA_PAGE_NL_47", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('WithOut_login_selectField_restaurant_and_cocktails')"}, {"name": "suite", "value": "testQA_Product"}, {"name": "subSuite", "value": "Test_Snack_Product08"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "23708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testQA_Product"}]}