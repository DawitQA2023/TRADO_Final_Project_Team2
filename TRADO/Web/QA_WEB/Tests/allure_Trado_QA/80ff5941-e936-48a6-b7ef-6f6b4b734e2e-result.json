{"name": "test_Goat_milk_trado_QA_PAGE_16", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x000001537FD26C20>, expected = 'חטיפים', actual = 'Goats Milk'\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n>           assert expected == actual\nE           AssertionError\n\n..\\Utils\\utils_QA.py:15: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TRADO.QA_WEB.Tests.testQA_Product.Test_Drinks_Product03 object at 0x000001537FCE6F80>\n\n    @pytest.mark.sanity\n    @allure.description('CLICK \"DRINK\" CATEGORIES')\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_Goat_milk_trado_QA_PAGE_16(self):\n        driver = self.driver\n        DRINK = Product_page(driver)\n        DRINK.Click_drink_link()\n        DRINK.Click_goat_milk_product()\n        text = DRINK.Assert_text(path.DISPLAY_NAME_TITLE)\n>       Utils(driver).assertion(\"חטיפים\", text)\n\ntestQA_Product.py:207: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x000001537FD26C20>, expected = 'חטיפים', actual = 'Goats Milk'\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n            assert expected == actual\n            self.driver.implicitly_wait(1000)\n    \n        except AssertionError:\n            allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n>           raise AssertionError\nE           AssertionError\n\n..\\Utils\\utils_QA.py:20: AssertionError"}, "description": "CLICK \"DRINK\" CATEGORIES", "steps": [{"name": "Click_drink_link", "status": "passed", "start": 1677106182563, "stop": 1677106183633}, {"name": "Click_goat_milk_product", "status": "passed", "start": 1677106183633, "stop": 1677106184719}, {"name": "Assert_text", "status": "passed", "parameters": [{"name": "path", "value": "'/html/body/div[1]/div/div[2]/div[2]/div/div/div[2]/div/div[1]/div[1]/div/div[1]/div[2]/div[1]/h1'"}], "start": 1677106184720, "stop": 1677106184866}, {"name": "assertion", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "attachments": [{"name": "screenShot", "source": "df89e006-f460-4459-8856-8091a9cc9744-attachment.png", "type": "image/png"}], "parameters": [{"name": "expected", "value": "'חטיפים'"}, {"name": "actual", "value": "'Goats Milk'"}], "start": 1677106184867, "stop": 1677106185019}], "attachments": [{"name": "stdout", "source": "119fe4f0-8c8f-4b14-a129-afc044551cd7-attachment.txt", "type": "text/plain"}], "start": 1677106182563, "stop": 1677106185019, "uuid": "547ea8ac-d632-486f-a4f5-422de85de2e2", "historyId": "15a91001c8d800596a5024faade2b9f8", "testCaseId": "346ddbb39d35067b30d73842b78a3f14", "fullName": "testQA_Product.Test_Drinks_Product03#test_Goat_milk_trado_QA_PAGE_16", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "sanity"}, {"name": "tag", "value": "@pytest.mark.usefixtures('Valid_Login_With_login_Code')"}, {"name": "suite", "value": "testQA_Product"}, {"name": "subSuite", "value": "Test_Drinks_Product03"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "23708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testQA_Product"}]}