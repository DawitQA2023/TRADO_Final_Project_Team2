{"name": "test_upload_product_when_storeName_is_null03", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000018931DD4AF0>, expected = 6, actual = 8\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n>           assert expected == actual\nE           AssertionError\n\n..\\Utils\\utils_QA.py:15: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TRADO.QA_WEB.Tests.testQA_upload_new_product.Test_Upload_New_Product_not_having_store object at 0x00000189313A3070>\n\n    @allure.description('Upload a product incorrectly when the user does not have a store and storeName is null')\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_upload_product_when_storeName_is_null03(self):\n        driver = self.driver\n        upload_product = Upload_New_Product_Page(driver)\n        upload_product.click_add_new_product_section()\n>       upload_product.enter_all_inputs_filed(['1', '', '0147258367', 'Team2@trado.com', 'team2.com', 'beersheva',\n                                               'nurit', '2'])\n\ntestQA_upload_new_product.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\upload_new_productQA_page.py:58: in enter_all_inputs_filed\n    fields = self.inputs_fields()\n..\\Pages\\upload_new_productQA_page.py:40: in inputs_fields\n    utils.assertion(len(fields), 8)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <TRADO.QA_WEB.Utils.utils_QA.Utils object at 0x0000018931DD4AF0>, expected = 6, actual = 8\n\n    @allure.step\n    @allure.description('This validation method, if the assert failed it will take screenshot')\n    def assertion(self, expected, actual):\n        driver = self.driver\n        try:\n            assert expected == actual\n            self.driver.implicitly_wait(1000)\n    \n        except AssertionError:\n            allure.attach(driver.get_screenshot_as_png(), name='screenShot',attachment_type=AttachmentType.PNG)\n>           raise AssertionError\nE           AssertionError\n\n..\\Utils\\utils_QA.py:20: AssertionError"}, "description": "Upload a product incorrectly when the user does not have a store and storeName is null", "steps": [{"name": "click_add_new_product_section", "status": "passed", "start": 1677105093528, "stop": 1677105095696}, {"name": "enter_all_inputs_filed", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 58, in enter_all_inputs_filed\n    fields = self.inputs_fields()\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 40, in inputs_fields\n    utils.assertion(len(fields), 8)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "steps": [{"name": "inputs_fields", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Pages\\upload_new_productQA_page.py\", line 40, in inputs_fields\n    utils.assertion(len(fields), 8)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "steps": [{"name": "assertion", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\user\\QA_Automation\\2023_Final_Project\\TRADO\\QA_WEB\\Utils\\utils_QA.py\", line 20, in assertion\n    raise AssertionError\n"}, "attachments": [{"name": "screenShot", "source": "d414610d-863e-4cd8-87c8-f8cd3b54bd88-attachment.png", "type": "image/png"}], "parameters": [{"name": "expected", "value": "6"}, {"name": "actual", "value": "8"}], "start": 1677105096712, "stop": 1677105096892}], "start": 1677105095696, "stop": 1677105096892}], "parameters": [{"name": "data", "value": "['1', '', '0147258367', 'Team2@trado.com', 'team2.com', 'beersheva', 'nurit', '2']"}], "start": 1677105095696, "stop": 1677105096892}], "attachments": [{"name": "stdout", "source": "216e33b0-1223-456c-839a-da758024abad-attachment.txt", "type": "text/plain"}], "start": 1677105093528, "stop": 1677105096893, "uuid": "069f155e-dfd7-425c-87ab-3d787360c811", "historyId": "f84c1f7eb527df92d89688b90472ca83", "testCaseId": "b8763d1ada154d336ac621d0d1b77cad", "fullName": "testQA_upload_new_product.Test_Upload_New_Product_not_having_store#test_upload_product_when_storeName_is_null03", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('Valid_Login_With_login_Code')"}, {"name": "suite", "value": "testQA_upload_new_product"}, {"name": "subSuite", "value": "Test_Upload_New_Product_not_having_store"}, {"name": "host", "value": "LAPTOP-42FB6NAB"}, {"name": "thread", "value": "18808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testQA_upload_new_product"}]}